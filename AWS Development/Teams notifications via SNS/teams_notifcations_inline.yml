AWSTemplateFormatVersion: 2010-09-09
Description: A template to send SNS notifications to MS teams when a new image is deployed to production

Parameters:

  TopicName:
    Type: String
    Description:  An SNS topic for the status of image release notifications
    Default: teams-notification-topic

Resources:
  SNSTopic: 
    Type: AWS::SNS::Topic
    DeletionPolicy: Retain
    Properties:
      Subscription: 
       - Endpoint: "a1103879.CSCPortal.onmicrosoft.com@uk.teams.ms"
         Protocol: "email"
      TopicName: !Ref TopicName

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
      - Ref: SNSTopic
      PolicyDocument:
        Version: '2008-10-17'
        Id: __ami_release_sns_policy_ID
        Statement:
        - Sid: __ami_release_sns_statement_ID
          Effect: Allow
          Action:
          - sns:Publish
          - SNS:GetTopicAttributes
          - SNS:SetTopicAttributes
          - SNS:AddPermission
          - SNS:RemovePermission
          - SNS:DeleteTopic
          - SNS:Subscribe
          - SNS:ListSubscriptionsByTopic
          - SNS:Publish
          - SNS:Receive
          Resource:
            Ref: SNSTopic
          Principal:
             AWS: "*"
        - Effect: Allow
          Principal:
            Service: 
              - events.amazonaws.com
          Action: sns:Publish
          Resource:
            Ref: SNSTopic

  AMITeamsNotificationsLambda:
    DependsOn:
    - SNSTopic
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: AMITeamsNotifications
      Handler: index.lambda_handler 
      Role: !GetAtt 
        - AMITeamsNotificationsLambdaRole
        - Arn
      Code:
        ZipFile: |
          import boto3
          import logging
          from datetime import datetime, timezone
          import urllib3
          import json

          # Event data format
          # {
          #     "Source": "amif.create_ami",
          #     "Detail": "{"ImageId":"$new_ami_id"}",
          #     "DetailType":"AMIF Created AMI"
          # }

          def lambda_handler(event, context):

              # Initialise logging
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)

              # Initialise SNS client
              sns_client = boto3.client('sns')

              # Current date and time
              datetime_now = datetime.now(timezone.utc)

              # Placeholder webhook message - Insert event info accordingly
              webhook_message = {
                  "@type": "MessageCard",
                  "@context": "http://schema.org/extensions",
                  "themeColor": "0076D7",
                  "summary": "John Doe commented on Trello",
                  "title": "AMI Factory - New AMI - RHEL 8 - Hardened ",
                  "sections": [{
                      "activityTitle": "Red Hat Enterprise Linux 8 - Hardened ",
                      "type": "TextBlock",
                      "text": "Available now for immediate use the CIS Level 1 (hardened) version of RHEL 8.",
                      "weight": "bolder",
                      "size": "large",
                      "facts": [{
                          "name": "AWS Region availability:",
                          "value": "eu-west-1 (Ireland), eu-west-2 (London), us-east-1 (N. Virginia)"
                      }, {
                          "name": "Other Information",
                          "value": "This AMI is built to the same standard, with the same tooling installed, as the other CIS Level 1 operating environments offered by the AMI Factory."
                      }, {
                          "name": "Date and Time of release",
                          "value": f"{ datetime_now }"
                      }, {
                          "name": "Link to AMIs",
                          "value": "Insert link here"
                      }, {
                          "name": "Want direct notifications?",
                          "value": "Subscribe here: Insert link here"
                      }],
                      "markdown": True
                  },
                  {
                      "type": "TextBlock",
                      "text": "AMI Factory AMIs are generated by AWS Subscription AMIF-SUB."
                  }]
              }

              # Placeholder email message - Insert event info accordingly
              email_message = "AMI Factory - New AMI - RHEL 8 - Hardened \n" \
                              " \n" \
                              "Image: Red Hat Enterprise Linux 8 - Hardened \n" \
                              "Available now for immediate use the CIS Level 1 (hardened) version of RHEL 8. \n" \
                              "AWS Region availability: eu-west-1 (Ireland), eu-west-2 (London), us-east-1 (N. Virginia) \n" \
                              "Other Information: This AMI is built to the same standard, with the same tooling installed, as the other CIS Level 1 operating environments offered by the AMI Factory. \n" \
                              "Date and Time of release: " + f"{ datetime_now } \n" \
                              "Link to AMIs: Insert links here \n" \
                              "Want direct notifications? " + "Subscribe here: Insert link here \n" \
                              " \n" \
                              "AMI Factory AMIs are generated by AWS Subscription AMIF-SUB."

              # Pool Manager
              http = urllib3.PoolManager()

              # Teams Email Address - Update this email in the CloudFormation template with prod teams channel email address
              # email_add = "a1103879.CSCPortal.onmicrosoft.com@uk.teams.ms"

              # Webhook url - Update this with prod webhook
              url = "https://cscportal.webhook.office.com/webhookb2/3b715d81-6304-4e86-8b8a-0e22708fe96b@93f33571-550f-43cf-b09f-cd331338d086/IncomingWebhook/4849dd1092ab44e7800ea1277b79488b/d9e00550-fa0e-43a1-8bd2-90503188b3f8"

              try:
                  # Get the source IP of the user and build agent
                  # sourceAMI = event['Source']
                  # imageID = event['Detail']['ImageId']
                  # createdAMI = event['DetailType']

                  response = sns_client.list_topics()
                  for topic in response['Topics']:
                      if 'teams-notification-topic' in topic['TopicArn']:
                          topic_arn = topic['TopicArn']
                          print(topic['TopicArn'])

                  # Update Teams via Email notification - Publish message to topic
                  response = sns_client.publish(
                      TargetArn=topic_arn,
                      Message=email_message
                  )

                  # Update Teams via Webhook notification
                  encoded_wh_msg = json.dumps(webhook_message).encode('utf-8')
                  response = http.request('POST', url, body=encoded_wh_msg)
                  print(f"Status: {response.status}, Data: {response.data}")

                  logger.info('Message sent successfully!')

                  return {
                      'statusCode': 201,
                      'body': 'Function run successfully. Please see logs for more details.'
                  }

              except Exception as e:
                  logger.error(e)
                  return {
                      'statusCode': 501,
                      'body': '{"status":"Function error!"}'
                  }
      Runtime: python3.8
      Timeout: 300
  AMITeamsNotificationsLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AMITeamsNotificationsLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AMITeamsNotificationsLambdaExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'sns:Publish*'
                  - 'sns:GetTopicAttributes*'
                  - 'sns:ListTopics*'
                Resource: '*'

  # Outputs: 
  #   TopicArn: 
  #     Description: Arn of Created SNS Topic
  #     Value: !Ref SNSTopic
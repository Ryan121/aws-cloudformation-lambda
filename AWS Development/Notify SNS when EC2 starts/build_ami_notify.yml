AWSTemplateFormatVersion: 2010-09-09
Description: A template to send SNS notifications when a image build is started by an ec2 instance & when the AMI is available and the built is complete

Parameters:

  TopicName:
    Type: String
    Description:  An SNS topic for the status of image build notifications
    Default: packer-image-build-topic

  BucketName:
    Type: String
    Description:  The name for the cloudtrail S3 bucket
    Default: cloudtrail-trail

  LogFilePrefix:
    Type: String
    Description:  The prefix for the log file
    Default: cloudtrail-packer

  SQSQueue:
    Type: String
    Description: Standard queue for packer build notifications
    Default: packer-image-build-queue

Resources:

  TrailBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  BucketPolicy: 
      Type: AWS::S3::BucketPolicy
      Properties: 
        Bucket: 
          Ref: TrailBucket
        PolicyDocument: 
          Statement: 
            - 
              Sid: AWSCloudTrailAclCheck
              Effect: Allow
              Principal: 
                Service: cloudtrail.amazonaws.com
              Action: s3:GetBucketAcl
              Resource: 
                !Sub |-
                  arn:aws:s3:::${TrailBucket}
            - 
              Sid: AWSCloudTrailWrite
              Effect: Allow
              Principal: 
                Service: cloudtrail.amazonaws.com
              Action: s3:PutObject
              Resource:
                !Sub |-
                  arn:aws:s3:::${TrailBucket}/AWSLogs/${AWS::AccountId}/*
              Condition: 
                StringEquals:
                  s3:x-amz-acl: bucket-owner-full-control

  SNSTopic: 
    Type: AWS::SNS::Topic
    DeletionPolicy: Retain
    Properties:
      # Subscription: 
      #  - Endpoint: "r.sers14@gmail.com"
      #    Protocol: "email"
      TopicName: !Ref TopicName

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
      - Ref: SNSTopic
      PolicyDocument:
        Version: '2008-10-17'
        Id: __default_policy_ID
        Statement:
        - Sid: __default_statement_ID
          Effect: Allow
          Action:
          - sns:Publish
          - SNS:GetTopicAttributes
          - SNS:SetTopicAttributes
          - SNS:AddPermission
          - SNS:RemovePermission
          - SNS:DeleteTopic
          - SNS:Subscribe
          - SNS:ListSubscriptionsByTopic
          - SNS:Publish
          - SNS:Receive
          Resource:
            Ref: SNSTopic
          Principal:
             AWS: "*"
        - Effect: Allow
          Principal:
            Service: 
              - events.amazonaws.com
          Action: sns:Publish
          Resource:
            Ref: SNSTopic

  CloudWatchEventTrigger:
    DependsOn:
    # - SNSTopic
    # - SNSTopicPolicy
    - ImageBuildStatusLambda
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
        - aws.ec2
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - RunInstances
          - CreateImage
          - TerminateInstances
      State: ENABLED
      Targets:
        - Id: "ImageBuildStatusLambda"
          Arn: !GetAtt ImageBuildStatusLambda.Arn
        # - Id: "SNStopic"
        #   Arn: !Ref SNSTopic
        # - Id: 'CloudwatchLogsTarget'
        #   Arn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CFNLogGroup}"



  LogGroup: # A new log group
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3 # optional

  CloudTrailLogsRole: # A role for your trail
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com

      Policies:
      - PolicyName: 'cloudtrail-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: !GetAtt 'LogGroup.Arn'

  # CloudTrailLogsPolicy: # The policy for your role
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyDocument:
  #       Statement:
  #       - Action:
  #         - "logs:PutLogEvents"
  #         - "logs:CreateLogStream"
  #         Effect: Allow
  #         Resource: "*"
  #           # Fn::GetAtt:
  #           # - LogGroup
  #           # - Arn
  #       Version: '2012-10-17'
  #     PolicyName: DefaultPolicy
  #     Roles:
  #     - Ref: CloudTrailLogsRole

  CloudTrail: # The trail
    Type: AWS::CloudTrail::Trail
    DependsOn:
    - BucketPolicy
    Properties:
      TrailName: !Ref BucketName
      IsLogging: true
      S3BucketName: !Ref TrailBucket
      IncludeGlobalServiceEvents : true
      IsMultiRegionTrail: true
      CloudWatchLogsLogGroupArn:
        Fn::GetAtt:
        - LogGroup
        - Arn
      CloudWatchLogsRoleArn:
        Fn::GetAtt:
        - CloudTrailLogsRole
        - Arn
      # SnsTopicName: !GetAtt 'SNSTopic.TopicName'

    # - SNSTopic
  ImageBuildStatusLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: ImageBuildStatus
        Handler: index.lambda_handler 
        Role: !GetAtt 
          - ImageBuildStatusLambdaRole
          - Arn
        Code:
          ZipFile: |
              import boto3
              import logging
              from datetime import datetime, timezone
              import json


              def lambda_handler(event, context):

                  # Initialise logging
                  logger = logging.getLogger()
                  logger.setLevel(logging.INFO)

                  # Current date and time
                  datetime_now = datetime.now(timezone.utc)

                  # Packer build string
                  userAgent_string = "packer-"

                  try:
                      # Get the source IP of the user and build agent
                      sourceIP = event['detail']['sourceIPAddress']
                      userAgent = event['detail']['userAgent']

                      # Run when Cloudwatch triggers a packer initiated image build
                      # With the RunIstnaces, CreateImage and TerminateInstances API Calls via CloudTrail
                      if userAgent_string in userAgent:
                          # Extract Cloudwatch event details
                          trigger_name = event['detail']['eventName'] # Name of the API Call
                          trigger_user = event['detail']['userIdentity']['userName'] # User who initiated the packer build
                          trigger_time = event['detail']['eventTime'] # Build start time
                          trigger_region = event['detail']['awsRegion'] # AWS Region of API call
                          # trigger_eventID = event['detail']['eventID'] # Event ID
                          logger.info(f"User: {trigger_user}, Event name: {trigger_name}, Event ID: , "
                                      f"AWS Region: {trigger_region}, Event time: {trigger_time}") # Log key details

                          # Initialise SNS client
                          sns_client = boto3.client('sns')

                          # Get the existing topic name created by CloudFormation using the create_topic method
                          topic = sns_client.create_topic(Name='packer-image-build-topic')
                          topic_arn = topic['TopicArn']

                          # Initialise EC2 client
                          ec2_client = boto3.client('ec2')

                          # Initialise SQS client
                          sqs_client = boto3.client('sqs')
                          sqs_queue = sqs_client.get_queue_url(
                              QueueName="packer-image-build-queue",
                          )

                          # Get SQS url
                          sqs_queue_url = sqs_queue["QueueUrl"]

                          # Initialise build instance ID
                          instance_id = ""

                          # Initialise AMI variable
                          image_ami = ""

                          # Check API call
                          if trigger_name == "RunInstances":

                              # Extract EC2 instance building image
                              instance_id = event['detail']['responseElements']['instancesSet']['items'][0]['instanceId']

                              # Notify subscribers of EC2 start
                              sns_message = f"An packer build instance ({instance_id}) was started by {trigger_user} " \
                                            f"at {trigger_time} in the {trigger_region} region. Installing new image requirements..."

                              # Log message
                              logger.info(sns_message)
                              
                              # Publish message to topic
                              response = sns_client.publish(
                                  TargetArn=topic_arn,
                                  Message=sns_message
                              )

                          # # StopInstances API call removed 
                          # elif trigger_name == "StopInstances":
                          #     instance_id = event['detail']['responseElements']['instancesSet']['items'][0]['instanceId']

                          #     sns_message = f"The packer build EC2 instance ({instance_id}) was stopped " \
                          #                   f" {trigger_user}. "
                          #     print(sns_message)
                          #     logger.info(sns_message)
                          #     response = sns_client.publish(
                          #         TargetArn=topic_arn,
                          #         Message=sns_message
                          #     )

                          elif trigger_name == "CreateImage":
                              
                              # Extract EC2 instance building image
                              instance_id = event['detail']['requestParameters']['instanceId']
                              
                              # Extract image AMI
                              image_ami = event['detail']['responseElements']['imageId']

                              # Notify subscribers of image build
                              message = f"Image build requirements installed. EC2 instance {instance_id} was stopped." \
                                        f"Creating new image for {trigger_user} with ID: {image_ami}."

                              logger.info(message)

                              sns_client.publish(
                                  TargetArn=topic_arn,
                                  Message=message
                              )

                              # Push message to SQS containing user IP, name and the image AMI for future reference
                              sqs_message = {f"{sourceIP} - {trigger_user}": f"{image_ami}"}
                              sqs_client.send_message(
                                  QueueUrl=sqs_queue_url,
                                  MessageBody=json.dumps(sqs_message)
                              )

                          elif trigger_name == "TerminateInstances":

                              # Extract EC2 instance building image
                              instance_id = event['detail']['responseElements']['instancesSet']['items'][0]['instanceId']

                              # Get messages from SQS
                              response = sqs_client.receive_message(
                                  QueueUrl=sqs_queue_url,
                                  MaxNumberOfMessages=10,
                                  WaitTimeSeconds=3,
                              )

                              # print(f"Number of messages received: {len(response.get('Messages', []))}")

                              # Access messages if they exist
                              if len(response.get('Messages', [])) > 0:

                                  for message in response.get("Messages", []):

                                      message_dict = json.loads(message["Body"])
                                      
                                      # Get message handle
                                      receipt_handle = message['ReceiptHandle']
                                      # print(message["Body"])
                                      # print(f"Message body: {json.loads(message_body)}")
                                      # print(f"Receipt Handle: {message['ReceiptHandle']}")
                                      
                                      # Put keys into listfor iteration
                                      keys = list(message_dict.keys())

                                      for key in keys:
                                          # If the user IP and username matches a key stored in SQS
                                          if key == f"{sourceIP} - {trigger_user}":
                                              
                                              try:
                                                  # Validate that the AMI string stored in SQS actually exists
                                                  response = ec2_client.describe_images(ImageIds=[message_dict[key]])

                                                  sns_message = f"New AMI with id: {message_dict[key]} was successfully built by {trigger_user}. " \
                                                                f"Terminating build instance:  {instance_id}."

                                                  logger.info(sns_message)

                                                  response = sns_client.publish(
                                                      TargetArn=topic_arn,
                                                      Message=sns_message
                                                  )
                                              # Log error if AMI does not exist
                                              except Exception as e:
                                                  logger.error(f"The AMI: {message_dict[key]}, does not exist")
                                                  sns_message = f"Build failed for {trigger_user}." \
                                                                f"Terminating build instance: {instance_id}. Better luck next time :)"
                                                  response = sns_client.publish(
                                                      TargetArn=topic_arn,
                                                      Message=sns_message
                                                  )

                                              # Delete the SQS message as the corresponding AMI has been built or failed
                                              response = sqs_client.delete_message(
                                                  QueueUrl=sqs_queue_url,
                                                  ReceiptHandle=receipt_handle,
                                              )
                                              break

                                          else:
                                              sns_message = f"Build failed for {trigger_user}." \
                                                            f"Terminating build instance: {instance_id}. Better luck next time :)"
                                              logger.info(sns_message)
                                              response = sns_client.publish(
                                                  TargetArn=topic_arn,
                                                  Message=sns_message
                                              )
                              else:
                                  sns_message = f"Build failed for {trigger_user}." \
                                                f"Terminating build instance: {instance_id}. Better luck next time :)"
                                  logger.info(sns_message)
                                  response = sns_client.publish(
                                      TargetArn=topic_arn,
                                      Message=sns_message
                                  )

                          logger.info(f"The function ran by {trigger_user}, ran successfully at {datetime_now.now()}.")
                      else:
                          logger.info(f"The function ran at {datetime_now.now()}, however, a packer build was not detected.")
                      return {
                          'statusCode': 201,
                          'body': 'Function run successfully. Please see logs for more details.'
                      }

                  except Exception as e:
                      logger.error(e)
                      return {
                          'statusCode': 501,
                          'body': '{"status":"Function error!"}'
                      }

        Runtime: python3.8
        Timeout: 300
  Lambdatrigger:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ImageBuildStatusLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CloudWatchEventTrigger.Arn

  ImageBuildStatusLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ImageBuildStatusLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ImageBuildStatusExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeImages*'
                  - 'ec2:DescribeInstances*'
                  - 'ec2:DescribeSnapshots*'
                  - 'ec2:DeleteSnapshot*'
                  - 'sns:Publish'
                  - 'SNS:CreateTopic'
                  - 'SNS:GetTopicAttributes'
                  - 'sqs:SendMessage'
                  - 'sqs:GetQueueUrl'
                  - 'sqs:SendMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:ListQueues'
                  - 'sqs:ReceiveMessage'
                  - 'sqs:SetQueueAttributes'
                Resource: '*'
  
  StandardQueue: 
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: !Ref SQSQueue

Outputs: 
  TopicArn: 
    Description: Arn of Created SNS Topic
    Value: !Ref SNSTopic
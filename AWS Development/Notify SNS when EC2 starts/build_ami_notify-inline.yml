AWSTemplateFormatVersion: 2010-09-09
Description: A template to send SNS notifications when a image build is started by an ec2 instance & when the AMI is available and the built is complete

Parameters:

  TopicName:
    Type: String
    Description:  An SNS topic for the status of image build notifications
    Default: packer-image-build-topic

  BucketName:
    Type: String
    Description:  The prefix for the log file
    Default: cloudtrail-trail

  LogFilePrefix:
    Type: String
    Description:  The prefix for the log file
    Default: cloudtrail-packer

Resources:

  TrailBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  BucketPolicy: 
      Type: AWS::S3::BucketPolicy
      Properties: 
        Bucket: 
          Ref: TrailBucket
        PolicyDocument: 
          Statement: 
            - 
              Sid: AWSCloudTrailAclCheck
              Effect: Allow
              Principal: 
                Service: cloudtrail.amazonaws.com
              Action: s3:GetBucketAcl
              Resource: 
                !Sub |-
                  arn:aws:s3:::${TrailBucket}
            - 
              Sid: AWSCloudTrailWrite
              Effect: Allow
              Principal: 
                Service: cloudtrail.amazonaws.com
              Action: s3:PutObject
              Resource:
                !Sub |-
                  arn:aws:s3:::${TrailBucket}/AWSLogs/${AWS::AccountId}/*
              Condition: 
                StringEquals:
                  s3:x-amz-acl: bucket-owner-full-control

  SNSTopic: 
    Type: AWS::SNS::Topic
    DeletionPolicy: Retain
    Properties:
      Subscription: 
       - Endpoint: "r.sers14@gmail.com"
         Protocol: "email"
      TopicName: !Ref TopicName

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
      - Ref: SNSTopic
      PolicyDocument:
        Version: '2008-10-17'
        Id: __default_policy_ID
        Statement:
        - Sid: __default_statement_ID
          Effect: Allow
          Action:
          - sns:Publish
          - SNS:GetTopicAttributes
          - SNS:SetTopicAttributes
          - SNS:AddPermission
          - SNS:RemovePermission
          - SNS:DeleteTopic
          - SNS:Subscribe
          - SNS:ListSubscriptionsByTopic
          - SNS:Publish
          - SNS:Receive
          Resource:
            Ref: SNSTopic
          Principal:
             AWS: "*"
        - Effect: Allow
          Principal:
            Service: 
              - events.amazonaws.com
          Action: sns:Publish
          Resource:
            Ref: SNSTopic

  CloudWatchEventTrigger:
    DependsOn:
    - SNSTopic
    - SNSTopicPolicy
    - ImageBuildStatusLambda
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
        - aws.ec2
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - CreateKeyPair
      State: ENABLED
      Targets:
        - Id: "SNStopic"
          Arn: !Ref SNSTopic
        - Id: "ImageBuildStatusLambda"
          Arn: !GetAtt ImageBuildStatusLambda.Arn
        # - Id: 'CloudwatchLogsTarget'
        #   Arn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CFNLogGroup}"



  LogGroup: # A new log group
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7 # optional

  CloudTrailLogsRole: # A role for your trail
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com

      Policies:
      - PolicyName: 'cloudtrail-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: !GetAtt 'LogGroup.Arn'

  # CloudTrailLogsPolicy: # The policy for your role
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyDocument:
  #       Statement:
  #       - Action:
  #         - "logs:PutLogEvents"
  #         - "logs:CreateLogStream"
  #         Effect: Allow
  #         Resource: "*"
  #           # Fn::GetAtt:
  #           # - LogGroup
  #           # - Arn
  #       Version: '2012-10-17'
  #     PolicyName: DefaultPolicy
  #     Roles:
  #     - Ref: CloudTrailLogsRole

  CloudTrail: # The trail
    Type: AWS::CloudTrail::Trail
    DependsOn:
    - BucketPolicy
    Properties:
      TrailName: !Ref BucketName
      IsLogging: true
      S3BucketName: !Ref TrailBucket
      IncludeGlobalServiceEvents : true
      IsMultiRegionTrail: true
      CloudWatchLogsLogGroupArn:
        Fn::GetAtt:
        - LogGroup
        - Arn
      CloudWatchLogsRoleArn:
        Fn::GetAtt:
        - CloudTrailLogsRole
        - Arn
      # SnsTopicName: !GetAtt 'SNSTopic.TopicName'

    # - SNSTopic
  ImageBuildStatusLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        FunctionName: ImageBuildStatus
        Handler: index.lambda_handler 
        Role: !GetAtt 
          - ImageBuildStatusLambdaRole
          - Arn
        Code:
          ZipFile: |
            import boto3
            import logging
            from datetime import datetime, timezone

            # define the DynamoDB table that Lambda will connect to
            # tableName = "lambda-apigateway"

            # create the DynamoDB resource 
            # dynamo = boto3.resource('dynamodb').Table(tableName)
            # dynamo = boto3.client('dynamodb')

            logger = logging.getLogger()
            logger.setLevel(logging.INFO)

            print('Loading function')

            def lambda_handler(event, context):

                logger.info(event)

                # Current date and time
                datetime_now = datetime.now(timezone.utc)

                

                try:


                    logger.info(f"An image build was started by packer () snapshots were deleted at { datetime_now.now() }.")
                    return {
                        'statusCode': 201,
                        'body': 'Function run successfully. Please see logs for more details.'
                    }

                except Exception as e:
                    logger.error(e)
                    return {
                        'statusCode': 501,
                        'body': '{"status":"Function error!"}'
                    }
        Runtime: python3.8
        Timeout: 300
  Lambdatrigger:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ImageBuildStatusLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CloudWatchEventTrigger.Arn

  ImageBuildStatusLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ImageBuildStatusLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ImageBuildStatusExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeImages*'
                  - 'ec2:DescribeSnapshots*'
                  - 'ec2:DeleteSnapshot*'
                Resource: '*'

Outputs: 
  TopicArn: 
    Description: Arn of Created SNS Topic
    Value: !Ref SNSTopic